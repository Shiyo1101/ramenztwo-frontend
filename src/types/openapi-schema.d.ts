/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/analyze": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Analyze Press Release
     * @description プレスリリースをメディアフックの観点から分析し、評価と改善点を構造化JSONで返すエンドポイント
     */
    post: operations["analyze_press_release_analyze_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * EvaluationScore
     * @description 5段階評価スコア
     * @enum {integer}
     */
    EvaluationScore: 1 | 2 | 3 | 4 | 5;
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * ImageData
     * @description 画像データ
     * @example {
     *       "alt_text": "プレスリリースのトップ画像",
     *       "mime_type": "image/jpeg",
     *       "url": "https://example.com/image.jpg"
     *     }
     */
    ImageData: {
      /**
       * Url
       * @description 画像URL
       */
      url?: string | null;
      /**
       * Base64 Data
       * @description Base64エンコードされた画像データ
       */
      base64_data?: string | null;
      /**
       * Mime Type
       * @description 画像のMIMEタイプ (例: image/jpeg)
       */
      mime_type?: string | null;
      /**
       * Alt Text
       * @description 画像の代替テキスト
       */
      alt_text?: string | null;
    };
    /**
     * ImprovementPriority
     * @description 改善優先度
     * @enum {string}
     */
    ImprovementPriority: "low" | "medium" | "high" | "critical";
    /**
     * MediaHookEvaluation
     * @description メディアフック評価
     */
    MediaHookEvaluation: {
      hook_type: components["schemas"]["MediaHookType"];
      /**
       * Hook Name Ja
       * @description メディアフック名（日本語）
       */
      hook_name_ja: string;
      score: components["schemas"]["EvaluationScore"];
      /**
       * Description
       * @description 評価の説明
       */
      description: string;
      /**
       * Improve Examples
       * @description 改善例
       */
      improve_examples?: string[];
      /**
       * Current Elements
       * @description 現在含まれている要素
       */
      current_elements?: string[];
    };
    /**
     * MediaHookType
     * @description メディアフックの種類
     * @enum {string}
     */
    MediaHookType:
      | "trending_seasonal"
      | "unexpectedness"
      | "paradox_conflict"
      | "regional"
      | "topicality"
      | "social_public"
      | "novelty_uniqueness"
      | "superlative_rarity"
      | "visual_impact";
    /**
     * OverallAssessment
     * @description 全体評価サマリー
     */
    OverallAssessment: {
      /**
       * Total Score
       * @description 総合スコア（0-5）
       */
      total_score: number;
      /**
       * Strengths
       * @description 強み
       */
      strengths?: string[];
      /**
       * Weaknesses
       * @description 改善が必要な点
       */
      weaknesses?: string[];
      /**
       * Top Recommendations
       * @description 最優先の改善推奨事項
       */
      top_recommendations?: string[];
      /**
       * Estimated Impact
       * @description 改善による期待される影響
       */
      estimated_impact: string;
    };
    /**
     * ParagraphImprovement
     * @description 段落ごとの改善提案
     */
    ParagraphImprovement: {
      /**
       * Paragraph Index
       * @description 段落のインデックス（0から開始）
       */
      paragraph_index: number;
      /**
       * Original Text
       * @description 元のテキスト
       */
      original_text: string;
      /**
       * Improved Text
       * @description 改善後のテキスト案
       */
      improved_text?: string | null;
      /**
       * Improvements
       * @description 改善点のリスト
       */
      improvements?: string[];
      priority: components["schemas"]["ImprovementPriority"];
      /**
       * Applicable Hooks
       * @description この段落に適用可能なメディアフック
       */
      applicable_hooks?: components["schemas"]["MediaHookType"][];
    };
    /**
     * PressReleaseAnalysisResponse
     * @description プレスリリース分析結果のレスポンス
     */
    PressReleaseAnalysisResponse: {
      /**
       * Request Id
       * @description リクエストID（トラッキング用）
       */
      request_id: string;
      /**
       * Analyzed At
       * Format: date-time
       * @description 分析実行日時
       */
      analyzed_at?: string;
      /**
       * Media Hook Evaluations
       * @description 9つのメディアフックに対する評価
       */
      media_hook_evaluations: components["schemas"]["MediaHookEvaluation"][];
      /**
       * Paragraph Improvements
       * @description 段落ごとの改善提案
       */
      paragraph_improvements: components["schemas"]["ParagraphImprovement"][];
      overall_assessment: components["schemas"]["OverallAssessment"];
      /**
       * Processing Time Ms
       * @description 処理時間（ミリ秒）
       */
      processing_time_ms?: number | null;
      /**
       * Ai Model Used
       * @description 使用したAIモデル
       */
      ai_model_used?: string | null;
    };
    /**
     * PressReleaseInput
     * @description プレスリリース入力データ
     */
    PressReleaseInput: {
      /**
       * Title
       * @description 記事のタイトル
       */
      title: string;
      /** @description トップ画像 */
      top_image?: components["schemas"]["ImageData"] | null;
      /**
       * Content Markdown
       * @description プレスリリース本文（Markdown形式）
       */
      content_markdown: string;
      /**
       * Metadata
       * @description 追加メタデータ (例: ターゲットペルソナ)
       */
      metadata?: {
        [key: string]: unknown;
      } | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  analyze_press_release_analyze_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PressReleaseInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressReleaseAnalysisResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
